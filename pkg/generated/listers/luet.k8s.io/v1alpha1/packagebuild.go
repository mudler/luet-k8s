/*
Copyright 2019 Wrangler Sample Controller Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/mudler/luet-k8s/pkg/apis/luet.k8s.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PackageBuildLister helps list PackageBuilds.
type PackageBuildLister interface {
	// List lists all PackageBuilds in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PackageBuild, err error)
	// PackageBuilds returns an object that can list and get PackageBuilds.
	PackageBuilds(namespace string) PackageBuildNamespaceLister
	PackageBuildListerExpansion
}

// packageBuildLister implements the PackageBuildLister interface.
type packageBuildLister struct {
	indexer cache.Indexer
}

// NewPackageBuildLister returns a new PackageBuildLister.
func NewPackageBuildLister(indexer cache.Indexer) PackageBuildLister {
	return &packageBuildLister{indexer: indexer}
}

// List lists all PackageBuilds in the indexer.
func (s *packageBuildLister) List(selector labels.Selector) (ret []*v1alpha1.PackageBuild, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PackageBuild))
	})
	return ret, err
}

// PackageBuilds returns an object that can list and get PackageBuilds.
func (s *packageBuildLister) PackageBuilds(namespace string) PackageBuildNamespaceLister {
	return packageBuildNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PackageBuildNamespaceLister helps list and get PackageBuilds.
type PackageBuildNamespaceLister interface {
	// List lists all PackageBuilds in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PackageBuild, err error)
	// Get retrieves the PackageBuild from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PackageBuild, error)
	PackageBuildNamespaceListerExpansion
}

// packageBuildNamespaceLister implements the PackageBuildNamespaceLister
// interface.
type packageBuildNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PackageBuilds in the indexer for a given namespace.
func (s packageBuildNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PackageBuild, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PackageBuild))
	})
	return ret, err
}

// Get retrieves the PackageBuild from the indexer for a given namespace and name.
func (s packageBuildNamespaceLister) Get(name string) (*v1alpha1.PackageBuild, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("packagebuild"), name)
	}
	return obj.(*v1alpha1.PackageBuild), nil
}
