/*
Copyright 2019 Wrangler Sample Controller Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/mudler/luet-k8s/pkg/apis/build.luet.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RepoBuildLister helps list RepoBuilds.
// All objects returned here must be treated as read-only.
type RepoBuildLister interface {
	// List lists all RepoBuilds in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RepoBuild, err error)
	// RepoBuilds returns an object that can list and get RepoBuilds.
	RepoBuilds(namespace string) RepoBuildNamespaceLister
	RepoBuildListerExpansion
}

// repoBuildLister implements the RepoBuildLister interface.
type repoBuildLister struct {
	indexer cache.Indexer
}

// NewRepoBuildLister returns a new RepoBuildLister.
func NewRepoBuildLister(indexer cache.Indexer) RepoBuildLister {
	return &repoBuildLister{indexer: indexer}
}

// List lists all RepoBuilds in the indexer.
func (s *repoBuildLister) List(selector labels.Selector) (ret []*v1alpha1.RepoBuild, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RepoBuild))
	})
	return ret, err
}

// RepoBuilds returns an object that can list and get RepoBuilds.
func (s *repoBuildLister) RepoBuilds(namespace string) RepoBuildNamespaceLister {
	return repoBuildNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RepoBuildNamespaceLister helps list and get RepoBuilds.
// All objects returned here must be treated as read-only.
type RepoBuildNamespaceLister interface {
	// List lists all RepoBuilds in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RepoBuild, err error)
	// Get retrieves the RepoBuild from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RepoBuild, error)
	RepoBuildNamespaceListerExpansion
}

// repoBuildNamespaceLister implements the RepoBuildNamespaceLister
// interface.
type repoBuildNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RepoBuilds in the indexer for a given namespace.
func (s repoBuildNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RepoBuild, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RepoBuild))
	})
	return ret, err
}

// Get retrieves the RepoBuild from the indexer for a given namespace and name.
func (s repoBuildNamespaceLister) Get(name string) (*v1alpha1.RepoBuild, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("repobuild"), name)
	}
	return obj.(*v1alpha1.RepoBuild), nil
}
